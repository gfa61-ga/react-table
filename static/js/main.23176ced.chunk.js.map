{"version":3,"sources":["Components/Cell.js","Components/Row.js","Components/Table.js","Components/Search.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","fieldName","value","isEdited","react_default","a","createElement","type","name","onChange","handleRowChange","disabled","className","Row","state","_this","isNewRow","editedRowValues","newRow","e","_e$target","target","Object","objectSpread","defineProperty","setState","editRow","item","undoEditRow","saveRow","id","_this2","this","idx","fieldNames","map","Components_Cell","key","onClick","addRow","deleteRow","React","Component","Table","rows","i","Components_Row","addNewRow","Search","onQueryChange","evt","updateQuery","lib","placeholder","debounceTimeout","App","query","uuid","concat","toConsumableArray","showNewRow","row","filter","userQuery","validateQuery","replace","fetch","then","response","json","data","_this3","Components_Search","Components_Table","editedRowId","includes","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.23176ced.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Cell(props) {\r\n  let { fieldName, value, isEdited } = props;\r\n  return (\r\n    <td >\r\n        <input\r\n          type=\"text\"\r\n          name={fieldName}\r\n          value={value}\r\n          onChange={props.handleRowChange()}\r\n          disabled={isEdited ? false : true}\r\n          className={isEdited ? \"input-enabled\" : \"\"}\r\n        />\r\n    </td>\r\n  );\r\n}\r\n\r\nexport default Cell;","import React from 'react';\r\nimport Cell from './Cell';\r\n\r\nclass Row extends React.Component {\r\n\r\n  state = {\r\n    isEdited: this.props.isNewRow ? true : false,\r\n    editedRowValues: this.props.newRow\r\n  };\r\n\r\n  handleRowChange = () => e => {\r\n    const { name, value } = e.target;\r\n    let editedRowValues = {\r\n      ...this.state.editedRowValues,\r\n      [name]: value\r\n    };\r\n    this.setState({\r\n      editedRowValues\r\n    });\r\n  };\r\n\r\n  editRow = () => () => {\r\n    this.setState({\r\n      isEdited: true,\r\n      editedRowValues: this.props.item\r\n    })\r\n  }\r\n\r\n  undoEditRow = () => () => {\r\n    this.setState({\r\n      isEdited: false\r\n    })\r\n  }\r\n\r\n  saveRow = id => {\r\n    this.setState({\r\n      isEdited: false\r\n    });\r\n    this.props.saveRow(id, this.state.editedRowValues)\r\n  };\r\n\r\n  render() {\r\n    let props = this.props\r\n    let { item, isNewRow } = props;\r\n    return (\r\n      <tr >\r\n        <td>\r\n          {props.idx}\r\n        </td>\r\n\r\n        {props.fieldNames.map((fieldName) => (\r\n          <Cell\r\n            key={fieldName}\r\n            handleRowChange ={this.handleRowChange }\r\n            isEdited={this.state.isEdited}\r\n            fieldName={fieldName}\r\n            value={!this.state.isEdited\r\n              ? item[fieldName]\r\n              : this.state.editedRowValues[fieldName]\r\n            }\r\n          />\r\n        ))}\r\n\r\n        <td>\r\n          { !this.state.isEdited ? (\r\n            <button\r\n              onClick={this.editRow()}\r\n              className=\"buttons\"\r\n            >\r\n              <i className=\"far fa-edit edit-button\"></i>\r\n            </button>\r\n          ) : (\r\n            <button\r\n              onClick={isNewRow\r\n                ? () => {this.props.addRow(this.state.editedRowValues)}\r\n                : () => {this.saveRow(item.id)}\r\n              }\r\n              className=\"buttons save-button\"\r\n            >\r\n              <i className=\"fa fa-save\"></i>\r\n            </button>\r\n          )}\r\n        </td>\r\n        { !isNewRow && !this.state.isEdited\r\n          &&\r\n            <td>\r\n              <button\r\n                onClick={props.deleteRow(item.id)}\r\n                className=\"buttons delete-button\"\r\n              >\r\n                <i className=\"far fa-trash-alt\"></i>\r\n              </button>\r\n            </td>\r\n        }\r\n        { !isNewRow && this.state.isEdited\r\n          &&\r\n            <td>\r\n              <button\r\n                onClick={this.undoEditRow()}\r\n                className=\"buttons delete-button\"\r\n              >\r\n                <i className=\"fa fa-undo\"></i>\r\n              </button>\r\n            </td>\r\n        }\r\n\r\n      </tr>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Row;","import React from 'react';\r\nimport Row from './Row';\r\n\r\nfunction Table(props) {\r\n\r\n    let { fieldNames, rows } = props;\r\n    let newRow = {};\r\n    fieldNames.map((fieldName) => (\r\n      newRow[fieldName]=\"\"\r\n    ))\r\n\r\n    return (\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th> # </th>\r\n            {fieldNames.map((fieldName, i) => (\r\n              <th key={i}>\r\n                {fieldName}\r\n              </th>\r\n            ))}\r\n            <th></th>\r\n            <th></th>\r\n          </tr>\r\n        </thead>\r\n\r\n        <tbody>\r\n          { rows.map((item, idx) => (\r\n            <Row\r\n              key={item.id}\r\n              isNewRow = {false}\r\n              item = {item}\r\n              fieldNames = {fieldNames}\r\n              idx= {idx}\r\n              saveRow={props.saveRow}\r\n              deleteRow={props.deleteRow}\r\n            />\r\n          ))}\r\n          { props.addNewRow &&\r\n            <Row\r\n              key={'new_row'}\r\n              newRow= {newRow}\r\n              isNewRow = {true}\r\n              item = {newRow}\r\n              fieldNames = {fieldNames}\r\n              idx= {\"new\"}\r\n              addRow={props.addRow}\r\n              deleteRow={props.deleteRow}\r\n            />\r\n          }\r\n        </tbody>\r\n      </table>\r\n    );\r\n}\r\n\r\nexport default Table;","import React from 'react';\r\nimport { DebounceInput } from 'react-debounce-input';\r\n\r\nclass Search extends React.Component {\r\n\r\n\tonQueryChange = (evt) => {\r\n\t\tthis.props.updateQuery(evt.target.value);\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"search\">\r\n\t\t\t\t<DebounceInput\r\n\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\tplaceholder=\"Search..\"\r\n\t\t\t\t\tonChange={this.onQueryChange}\r\n\t\t\t\t\tdebounceTimeout={500}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Search;","import React from 'react';\nimport Table from './Components/Table';\nimport Search from './Components/Search';\nimport './App.css';\nimport uuid from 'uuid/v4';\n\nclass App extends React.Component {\n  state = {\n    query: \"\",\n    rows: [],\n    addNewRow: false\n  };\n\n  fieldNames = [\"name\", \"username\"];\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(data => {\n        data = data.map((row, i) =>{ return {...row, idx: i} })\n        this.setState({\n          rows: data\n        })\n      }\n    )\n  }\n\n  addRow = (editedRowValues) => {\n    editedRowValues.id = uuid();\n    if (!editedRowValues.name) {\n      editedRowValues.name = \"\"\n    }\n\n    this.setState({\n      rows: [...this.state.rows, editedRowValues],\n      addNewRow: false\n    });\n  };\n\n  showNewRow = () => {\n    this.setState({\n      addNewRow: true\n    });\n  }\n\n  saveRow = (id, editedRowValues) => {\n    let rows = [...this.state.rows];\n    rows = rows.map((row)=> {\n\n      if (row.id!==id) {\n        return row\n      } else {\n        return {...row, ...editedRowValues}\n      }\n    })\n    this.setState({\n      rows\n    });\n  };\n\n  deleteRow = (id) => () => {\n    let rows = [...this.state.rows]\n    rows = rows.filter((row)=>row.id!==id)\n    this.setState({\n      rows\n    })\n  }\n\n  updateQuery = (userQuery) => {\n    const validateQuery =\n      userQuery.replace(/[^a-zA-Z ]+|^\\s/g, '').replace(/\\s+/g, ' ');\n\n    this.setState({\n      query: validateQuery\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"app-container\">\n        <Search\n          updateQuery={this.updateQuery}\n        />\n        <Table\n          fieldNames={this.fieldNames}\n          addNewRow={this.state.addNewRow}\n          query={this.state.query}\n          editedRowId={this.state.editedRowId}\n          editedRowValues={this.state.editedRowValues}\n          rows={this.state.rows.filter((row) =>\n            row[\"name\"].includes(this.state.query)\n          )}\n          handleRowChange ={this.handleRowChange}\n          editRow={this.editRow}\n          saveRow={this.saveRow}\n          deleteRow={this.deleteRow}\n          addRow={this.addRow}\n        />\n        { this.state.addNewRow !== true &&\n          <button\n            className=\"buttons add-button\"\n            onClick={this.showNewRow}\n          >\n            Add <i className=\"fas fa-plus\"></i>\n          </button>\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}