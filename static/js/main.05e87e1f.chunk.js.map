{"version":3,"sources":["Components/Cell.js","Components/Row.js","Components/Table.js","Components/Search.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","fieldName","value","isEdited","react_default","a","createElement","Table","textAlign","Input","type","name","onChange","handleRowChange","disabled","Row","state","_this","isNewRow","editedRowValues","item","e","_e$target","target","Object","objectSpread","defineProperty","setState","editRow","undoEditRow","saveThisRow","id","saveRow","_this2","this","idx","fieldNames","map","Components_Cell","key","Button","circular","onClick","addRow","className","basic","color","deleteRow","React","Component","rows","newRow","Header","HeaderCell","Body","Components_Row","addNewRow","Search","onQueryChange","evt","updateQuery","fluid","icon","placeholder","_","debounce","leading","App","query","showNewRow","newRowValues","uuid","concat","toConsumableArray","filter","row","userQuery","validateQuery","replace","fetch","then","response","json","data","_this3","Container","Components_Search","Components_Table","includes","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.05e87e1f.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Table as SuiTable, Input } from 'semantic-ui-react'\r\n\r\nfunction Cell(props) {\r\n  let { fieldName, value, isEdited } = props;\r\n  return (\r\n    <SuiTable.Cell textAlign=\"center\">\r\n        <Input\r\n          type=\"text\"\r\n          name={fieldName}\r\n          value={value}\r\n          onChange={props.handleRowChange()}\r\n          disabled={isEdited ? false : true}\r\n        />\r\n    </SuiTable.Cell>\r\n  );\r\n}\r\n\r\nexport default Cell;","import React from 'react';\r\nimport Cell from './Cell';\r\nimport { Table as SuiTable, Button } from 'semantic-ui-react'\r\n\r\nclass Row extends React.Component {\r\n\r\n  state = {\r\n    isEdited: this.props.isNewRow,\r\n    editedRowValues: this.props.item\r\n  };\r\n\r\n  handleRowChange = () => e => {\r\n    const { name, value } = e.target;\r\n    let editedRowValues = {\r\n      ...this.state.editedRowValues,\r\n      [name]: value\r\n    };\r\n    this.setState({\r\n      editedRowValues\r\n    });\r\n  };\r\n\r\n  editRow = () => () => {\r\n    this.setState({\r\n      isEdited: true\r\n    })\r\n  }\r\n\r\n  undoEditRow = () => () => {\r\n    this.setState({\r\n      isEdited: false\r\n    })\r\n  }\r\n\r\n  saveThisRow = id => () => {\r\n    this.setState({\r\n      isEdited: false\r\n    });\r\n    this.props.saveRow(id, this.state.editedRowValues)\r\n  };\r\n\r\n  render() {\r\n    let props = this.props\r\n    let { item, isNewRow } = props;\r\n    return (\r\n      <SuiTable.Row>\r\n        <SuiTable.Cell>\r\n          {props.idx}\r\n        </SuiTable.Cell>\r\n\r\n        {props.fieldNames.map((fieldName) =>\r\n          <Cell\r\n            key={fieldName}\r\n            handleRowChange ={this.handleRowChange }\r\n            isEdited={this.state.isEdited}\r\n            fieldName={fieldName}\r\n            value={this.state.isEdited\r\n              ? this.state.editedRowValues[fieldName]\r\n              : item[fieldName]\r\n            }\r\n          />\r\n        )}\r\n\r\n        <SuiTable.Cell>\r\n          { this.state.isEdited\r\n            ?     /* If this row is edited, show \"Save\" Button */\r\n              <Button\r\n                circular\r\n                onClick={isNewRow\r\n                  ? this.props.addRow(this.state.editedRowValues)\r\n                  : this.saveThisRow(item.id)\r\n                }\r\n              >\r\n                <i className=\"fa fa-save\"></i>\r\n              </Button>\r\n            :     /* else show \"Edit\" Button */\r\n              <Button\r\n                circular\r\n                onClick={this.editRow()}\r\n              >\r\n                <i className=\"far fa-edit\"></i>\r\n              </Button>\r\n          }\r\n        </SuiTable.Cell>\r\n\r\n        {/* If this is a new row, don't show any Button */}\r\n        { !isNewRow && this.state.isEdited && /* else if this row is edited show \"Undo\" Button */\r\n          <SuiTable.Cell>\r\n            <Button\r\n              basic\r\n              color='red'\r\n              circular\r\n              onClick={this.undoEditRow()}\r\n            >\r\n              <i className=\"fa fa-undo\"></i>\r\n            </Button>\r\n          </SuiTable.Cell>\r\n        }\r\n        { !isNewRow && !this.state.isEdited && /* else show \"Delete\" Button */\r\n          <SuiTable.Cell>\r\n            <Button\r\n              basic\r\n              color='red'\r\n              circular\r\n              onClick={props.deleteRow(item.id)}\r\n            >\r\n              <i className=\"far fa-trash-alt\"></i>\r\n            </Button>\r\n          </SuiTable.Cell>\r\n        }\r\n      </SuiTable.Row>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Row;","import React from 'react';\r\nimport Row from './Row';\r\nimport { Table as SuiTable } from 'semantic-ui-react'\r\n\r\nfunction Table(props) {\r\n\r\n    let { fieldNames, rows } = props;\r\n\r\n    // Set initial values for a new empty row's object\r\n    let newRow = {};\r\n    fieldNames.map((fieldName) => (\r\n      newRow[fieldName]=\"\"\r\n    ))\r\n\r\n    return (\r\n      <SuiTable>\r\n        <SuiTable.Header>\r\n          <SuiTable.Row textAlign=\"center\">\r\n            <SuiTable.HeaderCell textAlign=\"left\"> # </SuiTable.HeaderCell>\r\n\r\n            {fieldNames.map((fieldName) =>\r\n              <SuiTable.HeaderCell key={fieldName}>\r\n                {fieldName}\r\n              </SuiTable.HeaderCell>\r\n            )}\r\n\r\n            <SuiTable.HeaderCell></SuiTable.HeaderCell>\r\n            <SuiTable.HeaderCell></SuiTable.HeaderCell>\r\n          </SuiTable.Row>\r\n        </SuiTable.Header>\r\n\r\n        <SuiTable.Body>\r\n          { rows.map((item, idx) =>\r\n            <Row\r\n              key={item.id}\r\n              isNewRow = {false}\r\n              item = {item}\r\n              fieldNames = {fieldNames}\r\n              idx= {idx+1}\r\n              saveRow={props.saveRow}\r\n              deleteRow={props.deleteRow}\r\n            />\r\n          )}\r\n\r\n          { props.addNewRow &&\r\n            <Row\r\n              key={'new_row'}\r\n              isNewRow = {true}\r\n              item = {newRow}\r\n              fieldNames = {fieldNames}\r\n              idx= {\"new\"}\r\n              addRow={props.addRow}\r\n              deleteRow={props.deleteRow}\r\n            />\r\n          }\r\n        </SuiTable.Body>\r\n      </SuiTable>\r\n    );\r\n}\r\n\r\nexport default Table;","import React from 'react';\r\nimport { Input } from 'semantic-ui-react'\r\nimport _ from 'lodash'\r\n\r\nclass Search extends React.Component {\r\n\r\n\tonQueryChange = (evt) => {\r\n\t\tthis.props.updateQuery(evt.target.value);\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<Input\r\n\t\t\t  fluid\r\n\t\t\t  type=\"text\"\r\n\t\t\t\ticon=\"search\"\r\n\t\t\t\tplaceholder=\"Search..\"\r\n\t\t\t\tonChange={_.debounce(\r\n\t\t\t\t\tthis.onQueryChange,\r\n\t\t\t\t\t500,\r\n\t\t\t\t\t{\r\n            leading: true,\r\n          }\r\n        )}\r\n\t\t\t/>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Search;","import React from 'react';\nimport Table from './Components/Table';\nimport Search from './Components/Search';\nimport uuid from 'uuid/v4';\nimport { Container, Button} from \"semantic-ui-react\";\n\nclass App extends React.Component {\n  state = {\n    query: \"\",\n    rows: [],\n    addNewRow: false // When addNewRow is true,\n                     // the Table shows an extra empty row\n  };\n\n  fieldNames = [\"name\", \"username\"]; // Defines the fieldnames of rows,\n                                     // that we want to be displayed in Table\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(data => {\n        this.setState({\n          rows: data\n        })\n      }\n    )\n  }\n\n  // Show a new empty row in Table component\n  showNewRow = () => {\n    this.setState({\n      addNewRow: true\n    });\n  }\n\n  // Add to rows table, the values that are entered into the new empty row of Table component\n  addRow = (newRowValues) => () => {\n    newRowValues.id = uuid();\n    this.setState({\n      rows: [...this.state.rows, newRowValues],\n      addNewRow: false\n    });\n  };\n\n  deleteRow = (id) => () => {\n    let rows = this.state.rows.filter(row =>\n      row.id!==id\n    )\n    this.setState({\n      rows\n    })\n  }\n\n  // This function is called from saveThisRow() funtion of the Row component\n  saveRow = (id, editedRowValues) => {\n    let rows = this.state.rows.map((row)=> {\n      if (row.id!==id) {\n        return row\n      } else {\n        return {...row, ...editedRowValues}\n      }\n    })\n    this.setState({\n      rows\n    });\n  };\n\n  updateQuery = (userQuery) => {\n    const validateQuery =\n      userQuery.replace(/[^a-zA-Z ]+|^\\s/g, '').replace(/\\s+/g, ' ');\n\n    this.setState({\n      query: validateQuery\n    });\n  }\n\n  render() {\n    return (\n      <Container>\n        <Search\n          updateQuery={this.updateQuery}\n        />\n\n        <Table\n          fieldNames={this.fieldNames}\n          addNewRow={this.state.addNewRow}\n          rows={this.state.rows.filter(row =>\n            row[\"name\"].includes(this.state.query)\n          )}\n          saveRow={this.saveRow}\n          deleteRow={this.deleteRow}\n          addRow={this.addRow}\n        />\n\n        { this.state.addNewRow !== true && /* Hide \"Add\" button, while adding a new row */\n          <Button\n            basic\n            color='red'\n            circular\n            onClick={this.showNewRow}\n          >\n            Add <i className=\"fas fa-plus\"></i>\n          </Button>\n        }\n      </Container>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}